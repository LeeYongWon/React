{"version":3,"sources":["Movie2.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster2","_ref2","poster","react_default","a","createElement","src","Movie2","_ref","title","concat","MovieGenres","genre","className","MoviePoster","_ref3","alt","Movie","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","Object","assertThisInitialized","setState","stop","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","_renderMovies2","src_Movie2","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c8480dc.chunk.js","sourcesContent":["import React  from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// class Movie2 extends Component {\r\n//     static propTypes={\r\n//         title:PropTypes.string.isRequired,\r\n//         poster:PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <h1>{`이곳은 Movie2 이 영화의 제목은 ${this.props.title}`}</h1>\r\n//                 <MoviePoster2 poster={this.props.poster} />\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\nfunction Movie2({ title, poster }) {\r\n    return (\r\n        <div>\r\n            <h1>{`이 영화의 제목은 ${title} 2`}</h1>\r\n            <MoviePoster2 poster={poster} />\r\n        </div>\r\n    );\r\n}\r\n// class MoviePoster2 extends Component {\r\n//     static propTypes={\r\n//         poster:PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <img src={this.props.poster}></img>\r\n//         );\r\n//     }\r\n// }\r\n//MoivePoster2는 props만 가지고 state를 갖지 않기 때문에 function 으로 작성\r\nfunction MoviePoster2({ poster }) {\r\n    return (\r\n        <img src={poster}></img>\r\n    );\r\n}\r\n\r\nMovie2.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired\r\n}\r\nMoviePoster2.propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n}\r\nexport default Movie2","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n// class Movie extends Component {\r\n//     static propTypes = {\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//         console.log(`Movie에서의 ${this.props.poster}`);\r\n//         return (\r\n//             <div>\r\n//                 <h1>{`이 영화의 제목은 ${this.props.title}`}</h1>\r\n//                 <Movieposter poster={this.props.poster} />\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genres, index) => <MovieGenres genres={genres} key={index + 1} />)}\r\n                </div>\r\n                <div className=\"Movie_Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n// class Movieposter extends Component {\r\n//     static propTypes={\r\n//         poster:PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         console.log(`MoviePoseter에서의 ${this.props.poster}`);\r\n//         return (\r\n//             <div>\r\n//                 <img src={this.props.poster}></img>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\nfunction MovieGenres({ genre }) {\r\n    return (\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    );\r\n}\r\nfunction MoviePoster({ poster, alt }) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"></img>\r\n    )\r\n}\r\n\r\nMovieGenres.propTypes = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n\r\n}\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n\r\n","import React, {Component} from 'react';\nimport Movie2 from './Movie2';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component{\n  /*\n  life cycle\n  - Render : componentWillMount() -> render() -> componentDidMount()\n\n  - Update : componentWillReceiveProps(){\n    이것은 컴포넌트가 새로운 props를 받았다는 뜻이다.\n  } -> shouldCoponentUpdate(){\n    리액트는 old props, 새로운 props를 살펴본 다음\n    이전과 새로운 props가 다르면 리액트는 update==='true'라고 생각한다.\n    이전 데이터와 새로운 데이터가 서로 달면 update가 발생한다.\n  } -> componentWillUpdate(){\n    컴포넌트가 업데이트 할 거라는 단계로 넘어간다.\n  }\n  -> render(){\n\n  } -> componentDidUpdate(){\n    \n  }\n  */\n //state를 만드는 방법\n \n  state={\n\n  }\n\n componentWillMount(){\n   console.log('컴포넌트 디드 마운트에서의 ', this )\n  this._getMovies();\n }\n\n_getMovies = async() => {\n  const movies = await this._callApi()\n  console.log('_getMovies에서의 ', this)\n  this.setState({\n    movies\n  })\n}\n\n_callApi = () =>{\n  return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=rating\")\n  .then(response => response.json())\n  .then(json =>json.data.movies)\n  .catch(err =>err) \n}\n _renderMovies = () => {\n  const movies = this.state.movies.map(movie => {\n    return <Movie \n    title={movie.title_english} \n    poster={movie.medium_cover_image}\n    key={movie.id} \n    genres={movie.genres}\n    synopsis={movie.synopsis}\n\n     />\n  })\n  return movies;\n }\n\n _renderMovies2 = () =>{\n    const movies =this.state.movies.map((movie) =>{\n      return <Movie2 title={movie.title_english} poster={movie.medium_cover_image} key={movie.id}/>\n    })\n    return movies;\n }\n\n  render(){\n    const {movies} = this.state;\n    return( \n      <div className='App'>\n        <div className={movies? \"App\" : \"App--loading\"}>\n          {movies ? this._renderMovies() : 'loading'}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}